// Autogenerated from Pigeon (v22.6.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ChartboostPrivacyStandard: Int {
  case gDPR = 0
  case cCPA = 1
}

private class ChartboostSDKApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ChartboostPrivacyStandard(rawValue: enumResultAsInt)
      }
      return nil
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class ChartboostSDKApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ChartboostPrivacyStandard {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class ChartboostSDKApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ChartboostSDKApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ChartboostSDKApiPigeonCodecWriter(data: data)
  }
}

class ChartboostSDKApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = ChartboostSDKApiPigeonCodec(
    readerWriter: ChartboostSDKApiPigeonCodecReaderWriter())
}

/// The generated classes set the channels to call the methods in the
/// corresponding kotlin ChartboostSDKApi interface and swift ChartboostSDKApi
/// protocol from the dart layer.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ChartboostSDKApi {
  /// Used to configure GDPR consent on the Android or iOS Chartboost SDK
  func setGDPRConsent(userConsent: Bool) throws
  /// Used to opt out of the sale of personal information in Chartboost SDK.
  func setCCPAConsent(userOptIn: Bool) throws
  /// Used to clear any of the privacy data use consent above.
  func clearDataUseConsent(privacyStandard: ChartboostPrivacyStandard) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ChartboostSDKApiSetup {
  static var codec: FlutterStandardMessageCodec { ChartboostSDKApiPigeonCodec.shared }
  /// Sets up an instance of `ChartboostSDKApi` to handle messages through the `binaryMessenger`.
  static func setUp(
    binaryMessenger: FlutterBinaryMessenger, api: ChartboostSDKApi?,
    messageChannelSuffix: String = ""
  ) {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Used to configure GDPR consent on the Android or iOS Chartboost SDK
    let setGDPRConsentChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.gma_mediation_chartboost.ChartboostSDKApi.setGDPRConsent\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setGDPRConsentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userConsentArg = args[0] as! Bool
        do {
          try api.setGDPRConsent(userConsent: userConsentArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setGDPRConsentChannel.setMessageHandler(nil)
    }
    /// Used to opt out of the sale of personal information in Chartboost SDK.
    let setCCPAConsentChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.gma_mediation_chartboost.ChartboostSDKApi.setCCPAConsent\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCCPAConsentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userOptInArg = args[0] as! Bool
        do {
          try api.setCCPAConsent(userOptIn: userOptInArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCCPAConsentChannel.setMessageHandler(nil)
    }
    /// Used to clear any of the privacy data use consent above.
    let clearDataUseConsentChannel = FlutterBasicMessageChannel(
      name:
        "dev.flutter.pigeon.gma_mediation_chartboost.ChartboostSDKApi.clearDataUseConsent\(channelSuffix)",
      binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearDataUseConsentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let privacyStandardArg = args[0] as! ChartboostPrivacyStandard
        do {
          try api.clearDataUseConsent(privacyStandard: privacyStandardArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearDataUseConsentChannel.setMessageHandler(nil)
    }
  }
}
