// Autogenerated from Pigeon (v19.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// The generated classes set the channels to call the methods in the corresponding kotlin DTExchangePrivacyApi interface and swift DTExchangePrivacyApi protocol from the dart layer.
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DTExchangePrivacyApi {
  /// Used to configure LGDP on the Android or iOS DTExchange SDK.
  func setLgpdConsent(wasConsentGiven: Bool) throws
  /// Used to clear the LGDP flag on the Android or iOS DTExchange SDK.
  func clearLgpdConsentData() throws
  /// Used to configure consent to Sell Personal Information on the Android or iOS DTExchange SDK.
  func setUSPrivacyString(usPrivacyString: String) throws
  /// Used to clear the US Privacy flag on the Android or iOS DTExchange SDK.
  func clearUSPrivacyString() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DTExchangePrivacyApiSetup {
  /// The codec used by DTExchangePrivacyApi.
  /// Sets up an instance of `DTExchangePrivacyApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DTExchangePrivacyApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// Used to configure LGDP on the Android or iOS DTExchange SDK.
    let setLgpdConsentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gma_mediation_dtexchange.DTExchangePrivacyApi.setLgpdConsent\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      setLgpdConsentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let wasConsentGivenArg = args[0] as! Bool
        do {
          try api.setLgpdConsent(wasConsentGiven: wasConsentGivenArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLgpdConsentChannel.setMessageHandler(nil)
    }
    /// Used to clear the LGDP flag on the Android or iOS DTExchange SDK.
    let clearLgpdConsentDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gma_mediation_dtexchange.DTExchangePrivacyApi.clearLgpdConsentData\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      clearLgpdConsentDataChannel.setMessageHandler { _, reply in
        do {
          try api.clearLgpdConsentData()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearLgpdConsentDataChannel.setMessageHandler(nil)
    }
    /// Used to configure consent to Sell Personal Information on the Android or iOS DTExchange SDK.
    let setUSPrivacyStringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gma_mediation_dtexchange.DTExchangePrivacyApi.setUSPrivacyString\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      setUSPrivacyStringChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usPrivacyStringArg = args[0] as! String
        do {
          try api.setUSPrivacyString(usPrivacyString: usPrivacyStringArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUSPrivacyStringChannel.setMessageHandler(nil)
    }
    /// Used to clear the US Privacy flag on the Android or iOS DTExchange SDK.
    let clearUSPrivacyStringChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.gma_mediation_dtexchange.DTExchangePrivacyApi.clearUSPrivacyString\(channelSuffix)", binaryMessenger: binaryMessenger)
    if let api = api {
      clearUSPrivacyStringChannel.setMessageHandler { _, reply in
        do {
          try api.clearUSPrivacyString()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearUSPrivacyStringChannel.setMessageHandler(nil)
    }
  }
}
